---
title: "NFL Point Spread: 1978-2013"
format: html
editor: visual
execute: 
  echo: false
  warning: false
---

NFL point spread is a major focus point for those looking to place wagers on the upcoming weekly games during the football season.

The data downloaded from Kaggle: NFL scores and betting data, contained an array of variables nested in a series of individual csv and xml files. This project's sole focus centered around point spread. Therefore, only csv files with the title suffix "lines.csv" from the dataset were extracted for use.

After importing the data using the read_csv() function, the immediate efforts were centered on tidying the data using a number of functions - janitor::clean_names() to generate compatible variable names, mutate() to add columns, select() to focus on the variables of interest, and rename() to rename variables.

A Bayesian regression model was generated, with margin of victory as the dependent variable and point spread (absolute) as the independent variable.

The plots generated from the Bayesian linear model highlight an increasing probable mean margin of victory as the point spread increases, which makes sense since those matchups are often a case of a superior opponent versus an inferior opponent. When the spread is greater than 7 points, the average margin of victory is in the neighborhood of 16 points. Overall, most games are decided by double digits.

```{r}
library(tidyverse)
library(rstanarm)
library(patchwork)
```

```{r}
# Data files
list_of_files <- list.files(path = "data",
                            recursive = TRUE,
                            pattern = "\\.csv$",
                            full.names = TRUE)  
```

```{r}
# Import data
x <- read_csv(list_of_files, id = "file_name", show_col_types = FALSE) |> 
  janitor::clean_names() |> 
  mutate(date = as.Date(date, "%m/%d/%Y"),
         betting_line = line) |> 
  mutate(victory_margin = abs(home_score - visitor_score)) |> 
  mutate(abs_betting_line = abs(betting_line), abs_victory_margin = abs(victory_margin)) |> 
  select(date, home_team, visitor, home_score, visitor_score, betting_line, abs_betting_line, victory_margin) |> 
  rename(home = home_team)
```

```{r}
# summary(x)
```

```{r}
# Model
obj_fit <- stan_glm(data = x,
         formula = victory_margin ~ abs_betting_line,
         family = gaussian,
         refresh = 0,
         seed = 9)
```

What is the expected mean margin of victory?

```{r}
# when the spread is less than or equal to 3 points
#obs_0_3 <- tibble(abs_betting_line = seq(0, 3, 0.5))
```

```{r}

# pp_0_3 <- posterior_epred(object = obj_fit, newdata = obs_0_3) |> 
#   as_tibble() |> 
#   rowwise() |> 
#   mutate(avg_diff_point_0_3 = mean(c_across(`1`:`7`)))
#pp_0_3
```

```{r}
# plot1 <- pp_0_3 |> 
#   ggplot(aes(x = avg_diff_point_0_3)) +
#     geom_histogram(aes(y = after_stat(count/sum(count))),
#                    bins = 100) +
#     labs(title = "Posterior for Expected mean NFL Margin of Victory when Point Spread \nis between 0 and 3 points",
#          subtitle = "",
#          x = "Margin of Victory (Points)",
#          y = "Probability",
#          caption = "Kaggle: NFL scores and betting data") +
#     scale_x_continuous(labels = scales::number_format()) +
#     scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#     theme_classic()
```

```{r}
# when the spread is between 3.5 and 4.5 points
# obs_3.5_4.5 <- tibble(abs_betting_line = seq(3.5, 4.5, 0.5))
```

```{r}
# when the spread is between 3.5 and 4.5 points
# pp_3.5_4.5 <- posterior_epred(object = obj_fit, newdata = obs_3.5_4.5) |> 
#   as_tibble() |> 
#   rowwise() |> 
#   mutate(avg_diff_point_3.5_4.5 = mean(c_across(`1`:`3`)))

```

```{r}
# when the spread is between 3.5 and 4.5 points
# plot2 <- pp_3.5_4.5 |> 
#   ggplot(aes(x = avg_diff_point_3.5_4.5)) +
#     geom_histogram(aes(y = after_stat(count/sum(count))),
#                    bins = 100) +
#     labs(title = "Posterior for Expected mean NFL Margin of Victory when Point Spread \nis between 3.5 and 4.5 points",
#          subtitle = "",
#          x = "Margin of Victory (points)",
#          y = "Probability",
#          caption = "Kaggle: NFL scores and betting data") +
#     scale_x_continuous(labels = scales::number_format()) +
#     scale_y_continuous(labels = scales::percent_format(accuracy = 1))  +
#     theme_classic()
```

```{r}
# when the spread is between 5 and 7 points
# obs_5_7 <- tibble(abs_betting_line = seq(5, 7, 0.5))
```

```{r}
# when the spread is between 5 and 7 points
# pp_5_7 <- posterior_epred(object = obj_fit, newdata = obs_5_7 ) |> 
#   as_tibble() |> 
#   rowwise() |> 
#   mutate(avg_diff_point_5_7 = mean(c_across(`1`:`3`)))
```

```{r}
# when the spread is between 5 and 7 points
# plot3 <- pp_5_7 |> 
#   ggplot(aes(x = avg_diff_point_5_7)) +
#     geom_histogram(aes(y = after_stat(count/sum(count))),
#                    bins = 100) +
#     labs(title = "Posterior for Expected mean NFL Margin of Victory when Point Spread \nis between 5 and 7 points",
#          subtitle = "",
#          x = "Margin of Victory (points)",
#          y = "Probability",
#          caption = "Kaggle: NFL scores and betting data") +
#     scale_x_continuous(labels = scales::number_format()) +
#     scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#     theme_classic()
```

```{r}
# when the spread is Greater than 7 points
obs_7.5 <- tibble(abs_betting_line = seq(7.5,26.5, 0.5))
```

```{r}
# when the spread is between 5 and 7 points
pp_7.5 <- posterior_epred(object = obj_fit, newdata = obs_7.5 ) |> 
  as_tibble() |> 
  rowwise() |> 
  mutate(avg_diff_point_7.5 = mean(c_across(`1`:`39`)))
```

```{r}
# when the spread is between 5 and 7 points
plot4 <- pp_7.5 |> 
  ggplot(aes(x = avg_diff_point_7.5)) +
    geom_histogram(aes(y = after_stat(count/sum(count))),
                   bins = 100) +
    labs(title = "Posterior for Expected mean NFL Margin of Victory when Point Spread \nis Greater than 7 Points",
         subtitle = "",
         x = "Margin of Victory (points)",
         y = "Probability",
         caption = "Kaggle: NFL scores and betting data") +
    scale_x_continuous(labels = scales::number_format()) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    theme_classic()
```

```{r}
plot4
```
